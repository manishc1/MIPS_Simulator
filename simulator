#! /usr/bin/python

"""
Entry point for the simulation.
"""

from collections import deque
from computer import *
from data_cache import *
from instruction_cache import *
from instruction_container import *
from instruction_organizer import *
from printer import *
from scanner import *

import operator
import sys


output = []


def simulate():
    """
    Simulate the execution of the instructions.
    """
    Instruction_Cache()
    Data_Cache()

    clock_cycle = 1
    
    active_instruction_containers = deque([Instruction_Container(INSTRUCTIONS[0], clock_cycle)])

    REGISTERS['PC'] = 1

    while (len(active_instruction_containers) > 0):
        active_instruction_containers = Instruction_Organizer.organize(active_instruction_containers)
        future_instruction_containers = deque([])

        while (len(active_instruction_containers) > 0):
            ic = active_instruction_containers.pop()
            if (ic.keep_executing()):                
                future_instruction_containers.appendleft(ic)
            else:
                output.append(ic.output)

        active_instruction_containers = future_instruction_containers

        clock_cycle += 1

        if ((REGISTERS['PC'] < len(INSTRUCTIONS)) and
            (STAGE_FLAG['IF'] == AVAILABLE)):
            active_instruction_containers.appendleft(Instruction_Container(INSTRUCTIONS[REGISTERS['PC']], clock_cycle))
            REGISTERS['PC'] += 1


def main(instFile, dataFile, regFile, configFile, resultFile):
    """
    Scan the files and issue simulation.
    """
    try:
        Scanner.scan_instructions(instFile)
        Scanner.scan_data(dataFile)
        Scanner.scan_registers(regFile)
        Scanner.scan_configuration(configFile)
    except Exception as e:
        string = 'Error: ' + str(e)
        try:
            writeString(resultFile, string)
        except Exception as e:
            print 'Error: ' + str(e)
        exit()

    simulate()

    try:
        Printer.print_output(resultFile, output)
    except Exception as e:
        print 'Error: ' + str(e)
        exit()

        
if __name__ == "__main__":
    """
    Entry point to the simulator.
    """
    nArgs = len(sys.argv)
    args = sys.argv
    if (nArgs != 6):
        print "Usage: simulator inst.txt data.txt reg.txt config.txt result.txt"
        exit()
    main(args[1], args[2], args[3], args[4], args[5])
